// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package lazy

type LazyString struct {
	initializer func() string
	value       string
}

func (this *LazyString) Value() string {
	if this.initializer != nil {
		this.value = this.initializer()
		this.initializer = nil
	}
	return this.value
}

func (this *LazyString) HasValue() bool {
	return this.initializer != nil
}

func OfString(f func() string) LazyString {
	return LazyString{initializer: f}
}

type LazyInt struct {
	initializer func() int
	value       int
}

func (this *LazyInt) Value() int {
	if this.initializer != nil {
		this.value = this.initializer()
		this.initializer = nil
	}
	return this.value
}

func (this *LazyInt) HasValue() bool {
	return this.initializer != nil
}

func OfInt(f func() int) LazyInt {
	return LazyInt{initializer: f}
}

type LazyBool struct {
	initializer func() bool
	value       bool
}

func (this *LazyBool) Value() bool {
	if this.initializer != nil {
		this.value = this.initializer()
		this.initializer = nil
	}
	return this.value
}

func (this *LazyBool) HasValue() bool {
	return this.initializer != nil
}

func OfBool(f func() bool) LazyBool {
	return LazyBool{initializer: f}
}

type LazyAny struct {
	initializer func() Any
	value       Any
}

func (this *LazyAny) Value() Any {
	if this.initializer != nil {
		this.value = this.initializer()
		this.initializer = nil
	}
	return this.value
}

func (this *LazyAny) HasValue() bool {
	return this.initializer != nil
}

func OfAny(f func() Any) LazyAny {
	return LazyAny{initializer: f}
}
